diff -dur vsftpd/orig_vsftpd/vsftpd-2.0.6/hash.c vsftpd-gen/vsftpd-2.0.6/hash.c
--- vsftpd/orig_vsftpd/vsftpd-2.0.6/hash.c	2011-10-05 12:40:20.755287000 -0400
+++ vsftpd-gen/vsftpd-2.0.6/hash.c	2011-10-05 12:40:20.755287000 -0400
@@ -13,11 +13,11 @@
 
 struct hash_node
 {
-  void* p_key;
-  void* p_value;
-  struct hash_node* p_prev;
-  struct hash_node* p_next;
-};
+  void E_T(@k) * p_key;
+  void E_T(@v) * p_value;
+  struct hash_node E_G(@k, @v) * p_prev;
+  struct hash_node E_G(@k, @v) * p_next;
+} E_GENERIC(@k, @v);
 
 struct hash
 {
@@ -25,8 +25,8 @@
   unsigned int key_size;
   unsigned int value_size;
   hashfunc_t hash_func;
-  struct hash_node** p_nodes;
-};
+  struct hash_node E_G(@k, @v) ** E_PTRARRAY(self.buckets) p_nodes;
+} E_GENERIC(@k, @v);
 
 /* Internal functions */
 struct hash_node** hash_get_bucket(struct hash* p_hash, void* p_key);
diff -dur vsftpd/orig_vsftpd/vsftpd-2.0.6/main.c vsftpd-gen/vsftpd-2.0.6/main.c
--- vsftpd/orig_vsftpd/vsftpd-2.0.6/main.c	2011-10-05 12:40:20.755287000 -0400
+++ vsftpd-gen/vsftpd-2.0.6/main.c	2011-10-05 12:40:20.755287000 -0400
@@ -23,6 +23,11 @@
 #include "vsftpver.h"
 #include "ssl.h"
 
+/* Ekiden */
+#include <unistd.h>
+#include "postlogin.h"
+#include "postprivparent.h"
+
 /*
  * Forward decls of helper functions
  */
@@ -32,8 +37,16 @@
 static void env_init(void);
 
 int
-main(int argc, const char* argv[])
+main(int argc, const char* argv[]) E_NOTELOCALS
 {
+  /* EKIDEN : print PID and version */
+  if (ekiden_is_updating_from("standalone.c") || !ekiden_is_updating()) {
+    fprintf(stdout, "Version %s    PID[%i]\n", VSF_VERSION, getpid());
+  }
+
+	/* EKIDEN: prevent update blocking */
+	siginterrupt(SIGUSR2, 1);
+
   struct vsf_session the_session =
   {
     /* Control connection */
@@ -87,6 +100,10 @@
     p_config_name = argv[1];
     config_specified = 1;
   }
+  
+  /* Ekiden: transformer */
+	MIGRATE_LOCAL(the_session); /**DSU data */
+
   /* This might need to open /dev/zero on systems lacking MAP_ANON. Needs
    * to be done early (i.e. before config file parse, which may use
    * anonymous pages
@@ -119,8 +136,11 @@
   }
   if (!tunable_run_as_launching_user)
   {
-    /* Just get out unless we start with requisite privilege */
-    die_unless_privileged();
+    /* Ekiden: let a demoted process update */
+		if(!ekiden_is_updating()) { 
+  		/* Just get out unless we start with requisite privilege */
+			die_unless_privileged();
+		}
   }
   if (tunable_setproctitle_enable)
   {
@@ -134,7 +154,8 @@
   {
     ssl_init(&the_session);
   }
-  if (tunable_listen || tunable_listen_ipv6)
+  if ((tunable_listen || tunable_listen_ipv6) &&  /* Ekiden */
+      ( ekiden_is_updating_from("standalone.c") || !ekiden_is_updating())) 
   {
     /* Standalone mode */
     struct vsf_client_launch ret = vsf_standalone_main();
@@ -209,6 +230,20 @@
       die2("cannot open email passwords file:", tunable_email_password_file);
     }
   }
+  
+  /* Ekiden: We can skip directly to the client mainloop if we updated from
+   there */
+  if(ekiden_is_updating_from("postlogin.c")) {
+    process_post_login(&the_session);
+  } else if(ekiden_is_updating_from("postprivparent.c")) {
+    vsf_priv_parent_postlogin(&the_session);
+  }	else if(ekiden_is_updating_from("prelogin.c")) {
+    init_connection(&the_session);
+	} else if(ekiden_is_updating_from("twoprocess.c")) {
+    process_login_req(&the_session);
+	} 
+	/* End Ekiden */
+	
   /* Special case - can force one process model if we've got a setup
    * needing _no_ privs
    */
diff -dur vsftpd/orig_vsftpd/vsftpd-2.0.6/Makefile vsftpd-gen/vsftpd-2.0.6/Makefile
--- vsftpd/orig_vsftpd/vsftpd-2.0.6/Makefile	2011-10-18 14:53:56.751916000 -0400
+++ vsftpd-gen/vsftpd-2.0.6/Makefile	2011-10-05 12:40:20.755287000 -0400
@@ -1,12 +1,25 @@
 # Makefile for systems with GNU tools
-CC 	=	gcc
-INSTALL	=	install
+
+LASTVERSION=2.0.5
+VERSION=2.0.6
+
+# EKIDEN
+EKINC  = -I../../../bin/
+EKLIB  = ../../../bin/libekiden.a
+CFLAGS_SHARED  = -ggdb3 -Wall -ldl -shared -fPIC -u ekiden_init_inplace
+CFLAGS = -ggdb3 -Wall -ldl -fPIC $(EKINC) $(EKLIB)
+EKDRV = ../../../bin/driver
+EKCC = ../../../tools/bin/ekcc --dostackvars --doglobalreg --keepunused -include ekiden.h
+EKJOIN = ../../../tools/bin/ektjoin
+EKGEN = ../../../tools/bin/xfgen
+
+USER_XFORM=vsftpd.xf
+GENERATED_XFORM=dsu.c
+
 IFLAGS  = -idirafter dummyinc
-#CFLAGS = -g
-CFLAGS	=	-O2 -Wall -W -Wshadow #-pedantic -Werror -Wconversion
 
 LIBS	=	`./vsf_findlibs.sh` -lcrypt -lcap
-LINK	=	-Wl,-s
+LINK	=	
 
 OBJS	=	main.o utility.o prelogin.o ftpcmdio.o postlogin.o privsock.o \
 		tunables.o ftpdataio.o secbuf.o ls.o \
@@ -16,30 +29,21 @@
     tcpwrap.o ipaddrparse.o access.o features.o readwrite.o opts.o \
     ssl.o sysutil.o sysdeputil.o
 
+all: vsftpd
 
 .c.o:
-	$(CC) -c $*.c $(CFLAGS) $(IFLAGS)
+	$(EKCC) $(CFLAGS) $(IFLAGS) -c $*.c --doeksavetypes --typesfile-out=$*.ekt
 
-vsftpd: $(OBJS) 
-	$(CC) -o vsftpd $(OBJS) $(LINK) $(LIBS) $(LDFLAGS)
+vsftpd-$(VERSION).ekt: $(OBJS)
+	$(EKJOIN) $@ $(patsubst %.o,%.ekt,$(OBJS))
 
-install:
-	if [ -x /usr/local/sbin ]; then \
-		$(INSTALL) -m 755 vsftpd /usr/local/sbin/vsftpd; \
-	else \
-		$(INSTALL) -m 755 vsftpd /usr/sbin/vsftpd; fi
-	if [ -x /usr/local/man ]; then \
-		$(INSTALL) -m 644 vsftpd.8 /usr/local/man/man8/vsftpd.8; \
-		$(INSTALL) -m 644 vsftpd.conf.5 /usr/local/man/man5/vsftpd.conf.5; \
-	elif [ -x /usr/share/man ]; then \
-		$(INSTALL) -m 644 vsftpd.8 /usr/share/man/man8/vsftpd.8; \
-		$(INSTALL) -m 644 vsftpd.conf.5 /usr/share/man/man5/vsftpd.conf.5; \
-	else \
-		$(INSTALL) -m 644 vsftpd.8 /usr/man/man8/vsftpd.8; \
-		$(INSTALL) -m 644 vsftpd.conf.5 /usr/man/man5/vsftpd.conf.5; fi
-	if [ -x /etc/xinetd.d ]; then \
-		$(INSTALL) -m 644 xinetd.d/vsftpd /etc/xinetd.d/vsftpd; fi
+$(GENERATED_XFORM): vsftpd-$(VERSION).ekt $(USER_XFORM)
+	$(EKGEN) $@ ../vsftpd-$(LASTVERSION)/vsftpd-$(LASTVERSION).ekt vsftpd-$(VERSION).ekt $(USER_XFORM)
+
+vsftpd: $(OBJS) $(GENERATED_XFORM)
+	$(CC) $(CFLAGS_SHARED) -ggdb3 -o vsftpd.so $(OBJS) $(GENERATED_XFORM) $(EKINC) $(EKLIB) $(LINK) $(LIBS)
+	cp vsftpd.so vsftpd2.so
 
 clean:
-	rm -f *.o *.swp vsftpd
+	rm -f *.o *.swp vsftpd*.so *.cil.c *.cil.i *.i *.ekt dsu.c
 
diff -dur vsftpd/orig_vsftpd/vsftpd-2.0.6/postlogin.c vsftpd-gen/vsftpd-2.0.6/postlogin.c
--- vsftpd/orig_vsftpd/vsftpd-2.0.6/postlogin.c	2011-10-05 12:40:20.755287000 -0400
+++ vsftpd-gen/vsftpd-2.0.6/postlogin.c	2011-10-05 12:40:20.755287000 -0400
@@ -98,16 +98,31 @@
     vsf_sysutil_install_sighandler(kVSFSysUtilSigURG, handle_sigurg, p_sess);
     vsf_sysutil_activate_sigurg(VSFTP_COMMAND_FD);
   }
-  /* Handle any login message */
-  vsf_banner_dir_changed(p_sess, FTP_LOGINOK);
-  vsf_cmdio_write(p_sess, FTP_LOGINOK, "Login successful.");
+  
+	/* Ekiden */
+  vsf_sysutil_ekiden_set_update_point("postlogin.c");
+  if(!ekiden_is_updating_from("postlogin.c")) {
+    /* Handle any login message */
+  	vsf_banner_dir_changed(p_sess, FTP_LOGINOK);
+  	vsf_cmdio_write(p_sess, FTP_LOGINOK, "Login successful.");
+	} else {
+    /* Set sigchld function pointer (normally done in twoprocess.c) */    
+    vsf_sysutil_default_sig(kVSFSysUtilSigCHLD);
+    vsf_sysutil_install_async_sighandler(kVSFSysUtilSigCHLD, twoproc_handle_sigchld);
+  }
+  /* End Ekiden */
+  
   while(1)
   {
     int cmd_ok = 1;
     if (tunable_setproctitle_enable)
     {
       vsf_sysutil_setproctitle("IDLE");
-    }
+    }    
+    
+    /* Ekiden update point */
+    ekiden_update("postlogin.c"); 
+    
     /* Blocks */
     vsf_cmdio_get_cmd_and_arg(p_sess, &p_sess->ftp_cmd_str,
                               &p_sess->ftp_arg_str, 1);
diff -dur vsftpd/orig_vsftpd/vsftpd-2.0.6/postprivparent.c vsftpd-gen/vsftpd-2.0.6/postprivparent.c
--- vsftpd/orig_vsftpd/vsftpd-2.0.6/postprivparent.c	2011-10-05 12:40:20.755287000 -0400
+++ vsftpd-gen/vsftpd-2.0.6/postprivparent.c	2011-10-05 12:40:20.755287000 -0400
@@ -22,6 +22,9 @@
 #include "sysstr.h"
 #include "sysdeputil.h"
 
+/* Ekiden */
+#include "twoprocess.h" /* needed for twoproc_handle_sigchld */
+
 static void minimize_privilege(struct vsf_session* p_sess);
 static void process_post_login_req(struct vsf_session* p_sess);
 static void cmd_process_chown(struct vsf_session* p_sess);
@@ -30,10 +33,22 @@
 void
 vsf_priv_parent_postlogin(struct vsf_session* p_sess)
 {
-  minimize_privilege(p_sess);
+  /* Ekiden */
+	if (!ekiden_is_updating()) {
+ 		minimize_privilege(p_sess);
+  } else {
+    /* Set sigchld function pointer (normally done in twoprocess.c) */    
+    vsf_sysutil_default_sig(kVSFSysUtilSigCHLD);
+    vsf_sysutil_install_async_sighandler(kVSFSysUtilSigCHLD, twoproc_handle_sigchld);
+  }
+  /* End Ekiden */
+
   /* We're still here... */
   while (1)
   {
+		/* Ekiden update point */
+    ekiden_update("postprivparent.c");
+
     process_post_login_req(p_sess);
   }
 }
diff -dur vsftpd/orig_vsftpd/vsftpd-2.0.6/prelogin.c vsftpd-gen/vsftpd-2.0.6/prelogin.c
--- vsftpd/orig_vsftpd/vsftpd-2.0.6/prelogin.c	2011-10-05 12:40:20.755287000 -0400
+++ vsftpd-gen/vsftpd-2.0.6/prelogin.c	2011-10-05 12:40:20.755287000 -0400
@@ -38,14 +38,18 @@
   {
     vsf_sysutil_setproctitle("not logged in");
   }
+  /* Ekiden, prevent printing greeting if just updated */  
+  if (!ekiden_is_updating()) {
   /* Before we talk to the remote, make sure an alarm is set up in case
    * writing the initial greetings should block.
    */
-  vsf_cmdio_set_alarm(p_sess);
-  emit_greeting(p_sess);
+    vsf_cmdio_set_alarm(p_sess);
+    emit_greeting(p_sess);
+  }
   parse_username_password(p_sess);
 }
 
+
 static void
 emit_greeting(struct vsf_session* p_sess)
 {
@@ -98,6 +102,11 @@
 {
   while (1)
   {
+    /* Ekiden: update point */
+		ekiden_update("prelogin.c");
+    /* Ekiden */  
+    vsf_sysutil_ekiden_set_update_point("prelogin.c");    
+
     vsf_cmdio_get_cmd_and_arg(p_sess, &p_sess->ftp_cmd_str,
                               &p_sess->ftp_arg_str, 1);
     if (str_equal_text(&p_sess->ftp_cmd_str, "USER"))
diff -dur vsftpd/orig_vsftpd/vsftpd-2.0.6/session.h vsftpd-gen/vsftpd-2.0.6/session.h
--- vsftpd/orig_vsftpd/vsftpd-2.0.6/session.h	2011-10-05 12:40:20.755287000 -0400
+++ vsftpd-gen/vsftpd-2.0.6/session.h	2011-10-05 12:40:20.755287000 -0400
@@ -18,13 +18,13 @@
 struct vsf_session
 {
   /* Details of the control connection */
-  struct vsf_sysutil_sockaddr* p_local_addr;
-  struct vsf_sysutil_sockaddr* p_remote_addr;
+  struct vsf_sysutil_sockaddr* E_OPAQUE p_local_addr;
+  struct vsf_sysutil_sockaddr* E_OPAQUE p_remote_addr;
   char* p_control_line_buf;
 
   /* Details of the data connection */
   int pasv_listen_fd;
-  struct vsf_sysutil_sockaddr* p_port_sockaddr;
+  struct vsf_sysutil_sockaddr* E_OPAQUE p_port_sockaddr;
   int data_fd;
   int data_progress;
   unsigned int bw_rate_max;
@@ -85,9 +85,9 @@
   /* Secure connections state */
   int control_use_ssl;
   int data_use_ssl;
-  void* p_ssl_ctx;
-  void* p_control_ssl;
-  void* p_data_ssl;
+  void* E_OPAQUE p_ssl_ctx;
+  void* E_OPAQUE p_control_ssl;
+  void* E_OPAQUE p_data_ssl;
   struct mystr control_cert_digest;
   int ssl_slave_active;
   int ssl_slave_fd;
diff -dur vsftpd/orig_vsftpd/vsftpd-2.0.6/standalone.c vsftpd-gen/vsftpd-2.0.6/standalone.c
--- vsftpd/orig_vsftpd/vsftpd-2.0.6/standalone.c	2011-10-05 12:40:20.755287000 -0400
+++ vsftpd-gen/vsftpd-2.0.6/standalone.c	2011-10-05 12:40:20.755287000 -0400
@@ -20,8 +20,8 @@
 #include "ipaddrparse.h"
 
 static unsigned int s_children;
-static struct hash* s_p_ip_count_hash;
-static struct hash* s_p_pid_ip_hash;
+static struct hash E_G(struct in6_addr, unsigned int) * s_p_ip_count_hash;
+static struct hash E_G(int, struct in6_addr) * s_p_pid_ip_hash;
 static unsigned int s_ipaddr_size;
 
 static void handle_sigchld(int duff);
@@ -34,7 +34,7 @@
 static unsigned int hash_pid(unsigned int buckets, void* p_key);
 
 struct vsf_client_launch
-vsf_standalone_main(void)
+vsf_standalone_main(void) E_NOTELOCALS
 {
   struct vsf_sysutil_sockaddr* p_accept_addr = 0;
   int listen_sock = -1;
@@ -68,76 +68,97 @@
   }
   vsf_sysutil_activate_reuseaddr(listen_sock);
 
-  s_p_ip_count_hash = hash_alloc(256, s_ipaddr_size,
-                                 sizeof(unsigned int), hash_ip);
-  s_p_pid_ip_hash = hash_alloc(256, sizeof(int),
-                               s_ipaddr_size, hash_pid);
+  /* Ekiden */
+  if (!ekiden_is_updating()) { 
+    s_p_ip_count_hash = hash_alloc(256, s_ipaddr_size,
+                                   sizeof(unsigned int), hash_ip);
+    s_p_pid_ip_hash = hash_alloc(256, sizeof(int),
+                                 s_ipaddr_size, hash_pid);
+  } 
   if (tunable_setproctitle_enable)
   {
     vsf_sysutil_setproctitle("LISTENER");
   }
   vsf_sysutil_install_async_sighandler(kVSFSysUtilSigCHLD, handle_sigchld);
   vsf_sysutil_install_async_sighandler(kVSFSysUtilSigHUP, handle_sighup);
-  if (tunable_listen)
-  {
-    struct vsf_sysutil_sockaddr* p_sockaddr = 0;
-    vsf_sysutil_sockaddr_alloc_ipv4(&p_sockaddr);
-    vsf_sysutil_sockaddr_set_port(p_sockaddr, tunable_listen_port);
-    if (!tunable_listen_address)
-    {
-      vsf_sysutil_sockaddr_set_any(p_sockaddr);
-    }
-    else
+  
+  /* Ekiden: transformers */
+	MIGRATE_STATIC(s_children); /**DSU data */
+	MIGRATE_STATIC(s_p_pid_ip_hash); /**DSU data */
+	MIGRATE_STATIC(s_p_ip_count_hash); /**DSU data */
+	MIGRATE_LOCAL(listen_sock); /**DSU data */
+
+  /* Ekiden: don't reinitialize if updating */
+  if(!ekiden_is_updating()) {
+    
+    if (tunable_listen)
     {
-      if (!vsf_sysutil_inet_aton(tunable_listen_address, p_sockaddr))
+      struct vsf_sysutil_sockaddr* p_sockaddr = 0;
+      vsf_sysutil_sockaddr_alloc_ipv4(&p_sockaddr);
+      vsf_sysutil_sockaddr_set_port(p_sockaddr, tunable_listen_port);
+      if (!tunable_listen_address)
       {
-        die2("bad listen_address: ", tunable_listen_address);
+        vsf_sysutil_sockaddr_set_any(p_sockaddr);
+      }
+      else
+      {
+        if (!vsf_sysutil_inet_aton(tunable_listen_address, p_sockaddr))
+        {
+          die2("bad listen_address: ", tunable_listen_address);
+        }
+      }
+      retval = vsf_sysutil_bind(listen_sock, p_sockaddr);
+      vsf_sysutil_free(p_sockaddr);
+      if (vsf_sysutil_retval_is_error(retval))
+      {
+        die("could not bind listening IPv4 socket");
       }
-    }
-    retval = vsf_sysutil_bind(listen_sock, p_sockaddr);
-    vsf_sysutil_free(p_sockaddr);
-    if (vsf_sysutil_retval_is_error(retval))
-    {
-      die("could not bind listening IPv4 socket");
-    }
-  }
-  else
-  {
-    struct vsf_sysutil_sockaddr* p_sockaddr = 0;
-    vsf_sysutil_sockaddr_alloc_ipv6(&p_sockaddr);
-    vsf_sysutil_sockaddr_set_port(p_sockaddr, tunable_listen_port);
-    if (!tunable_listen_address6)
-    {
-      vsf_sysutil_sockaddr_set_any(p_sockaddr);
     }
     else
     {
-      struct mystr addr_str = INIT_MYSTR;
-      const unsigned char* p_raw_addr;
-      str_alloc_text(&addr_str, tunable_listen_address6);
-      p_raw_addr = vsf_sysutil_parse_ipv6(&addr_str);
-      str_free(&addr_str);
-      if (!p_raw_addr)
+      struct vsf_sysutil_sockaddr* p_sockaddr = 0;
+      vsf_sysutil_sockaddr_alloc_ipv6(&p_sockaddr);
+      vsf_sysutil_sockaddr_set_port(p_sockaddr, tunable_listen_port);
+      if (!tunable_listen_address6)
       {
-        die2("bad listen_address6: ", tunable_listen_address6);
+        vsf_sysutil_sockaddr_set_any(p_sockaddr);
+      }
+      else
+      {
+        struct mystr addr_str = INIT_MYSTR;
+        const unsigned char* p_raw_addr;
+        str_alloc_text(&addr_str, tunable_listen_address6);
+        p_raw_addr = vsf_sysutil_parse_ipv6(&addr_str);
+        str_free(&addr_str);
+        if (!p_raw_addr)
+        {
+          die2("bad listen_address6: ", tunable_listen_address6);
+        }
+        vsf_sysutil_sockaddr_set_ipv6addr(p_sockaddr, p_raw_addr);
+      }
+      retval = vsf_sysutil_bind(listen_sock, p_sockaddr);
+      vsf_sysutil_free(p_sockaddr);
+      if (vsf_sysutil_retval_is_error(retval))
+      {
+        die("could not bind listening IPv6 socket");
       }
-      vsf_sysutil_sockaddr_set_ipv6addr(p_sockaddr, p_raw_addr);
-    }
-    retval = vsf_sysutil_bind(listen_sock, p_sockaddr);
-    vsf_sysutil_free(p_sockaddr);
-    if (vsf_sysutil_retval_is_error(retval))
-    {
-      die("could not bind listening IPv6 socket");
     }
+    vsf_sysutil_listen(listen_sock, VSFTP_LISTEN_BACKLOG);
   }
-  vsf_sysutil_listen(listen_sock, VSFTP_LISTEN_BACKLOG);
+  
+  /* Ekiden: memleak */
   vsf_sysutil_sockaddr_alloc(&p_accept_addr);
+  
   while (1)
   {
     struct vsf_client_launch child_info;
     void* p_raw_addr;
     int new_child;
-    int new_client_sock;
+    int new_client_sock;    
+    
+    /* Ekiden update point */
+    ekiden_update("standalone.c"); 
+
     vsf_sysutil_unblock_sig(kVSFSysUtilSigCHLD);
     vsf_sysutil_unblock_sig(kVSFSysUtilSigHUP);
     new_client_sock = vsf_sysutil_accept_timeout(
@@ -235,8 +256,11 @@
       /* Account per-IP limit */
       p_ip = (struct vsf_sysutil_ipaddr*)
         hash_lookup_entry(s_p_pid_ip_hash, (void*)&reap_one);
-      drop_ip_count(p_ip);      
-      hash_free_entry(s_p_pid_ip_hash, (void*)&reap_one);
+      /* Ekiden - old connections are not in the hash tables */
+      if (p_ip) {
+        drop_ip_count(p_ip);      
+        hash_free_entry(s_p_pid_ip_hash, (void*)&reap_one);
+      }
     }
   }
 }
diff -dur vsftpd/orig_vsftpd/vsftpd-2.0.6/str.h vsftpd-gen/vsftpd-2.0.6/str.h
--- vsftpd/orig_vsftpd/vsftpd-2.0.6/str.h	2011-10-05 12:40:20.755287000 -0400
+++ vsftpd-gen/vsftpd-2.0.6/str.h	2011-10-05 12:40:20.755287000 -0400
@@ -9,7 +9,7 @@
 
 struct mystr
 {
-  char* PRIVATE_HANDS_OFF_p_buf;
+  char* E_PTRARRAY(self.PRIVATE_HANDS_OFF_alloc_bytes) PRIVATE_HANDS_OFF_p_buf;
   /* Internally, EXCLUDES trailing null */
   unsigned int PRIVATE_HANDS_OFF_len;
   unsigned int PRIVATE_HANDS_OFF_alloc_bytes;
diff -dur vsftpd/orig_vsftpd/vsftpd-2.0.6/strlist.h vsftpd-gen/vsftpd-2.0.6/strlist.h
--- vsftpd/orig_vsftpd/vsftpd-2.0.6/strlist.h	2011-10-05 12:40:20.755287000 -0400
+++ vsftpd-gen/vsftpd-2.0.6/strlist.h	2011-10-05 12:40:20.755287000 -0400
@@ -9,7 +9,7 @@
 {
   unsigned int PRIVATE_HANDS_OFF_alloc_len;
   unsigned int PRIVATE_HANDS_OFF_list_len;
-  struct mystr_list_node* PRIVATE_HANDS_OFF_p_nodes;
+  struct mystr_list_node* E_PTRARRAY(self.PRIVATE_HANDS_OFF_alloc_len) PRIVATE_HANDS_OFF_p_nodes;
 };
 
 #define INIT_STRLIST \
diff -dur vsftpd/orig_vsftpd/vsftpd-2.0.6/sysutil.c vsftpd-gen/vsftpd-2.0.6/sysutil.c
--- vsftpd/orig_vsftpd/vsftpd-2.0.6/sysutil.c	2011-10-05 12:40:20.755287000 -0400
+++ vsftpd-gen/vsftpd-2.0.6/sysutil.c	2011-10-05 12:40:20.755287000 -0400
@@ -114,6 +114,12 @@
   }
 }
 
+/* Ekiden hack to deal with looped blocking */
+static char *update_point;
+void vsf_sysutil_ekiden_set_update_point(char *upd_point) {
+  update_point = upd_point;
+}
+
 /* Notes. This signal check is evaluated after potentially blocking system
  * calls, i.e. at highly defined points in the code. Since we only interrupt
  * at these definite locations, the signal handlers can be non-trivial
@@ -747,8 +753,12 @@
     int retval = recv(fd, p_buf, len, MSG_PEEK);
     int saved_errno = errno;
     vsf_sysutil_check_pending_actions(kVSFSysUtilIO, retval, fd);
-    if (retval < 0 && saved_errno == EINTR)
+    if (retval < 0 && errno == EINTR)
     {
+      /* Ekiden update point; hack to escape the blocking loop */
+      if (update_point != NULL) {
+			  ekiden_update(update_point);
+      }      
       continue;
     }
     return retval;
diff -dur vsftpd/orig_vsftpd/vsftpd-2.0.6/sysutil.h vsftpd-gen/vsftpd-2.0.6/sysutil.h
--- vsftpd/orig_vsftpd/vsftpd-2.0.6/sysutil.h	2011-10-05 12:40:20.755287000 -0400
+++ vsftpd-gen/vsftpd-2.0.6/sysutil.h	2011-10-05 12:40:20.755287000 -0400
@@ -39,6 +39,9 @@
 typedef void (*vsf_async_sighandle_t)(int);
 typedef void (*vsf_context_io_t)(int, int, void*);
 
+/* Ekiden: added function to help with blocking calls */
+void vsf_sysutil_ekiden_set_update_point(char *upd_point);
+
 void vsf_sysutil_install_null_sighandler(const enum EVSFSysUtilSignal sig);
 void vsf_sysutil_install_sighandler(const enum EVSFSysUtilSignal,
                                     vsf_sighandle_t handler, void* p_private);
diff -dur vsftpd/orig_vsftpd/vsftpd-2.0.6/twoprocess.c vsftpd-gen/vsftpd-2.0.6/twoprocess.c
--- vsftpd/orig_vsftpd/vsftpd-2.0.6/twoprocess.c	2011-10-05 12:40:20.755287000 -0400
+++ vsftpd-gen/vsftpd-2.0.6/twoprocess.c	2011-10-05 12:40:20.755287000 -0400
@@ -28,8 +28,8 @@
 #include "sysdeputil.h"
 
 static void drop_all_privs(void);
-static void handle_sigchld(int duff);
-static void process_login_req(struct vsf_session* p_sess);
+//static void handle_sigchld(int duff); Ekiden
+//static void process_login_req(struct vsf_session* p_sess); Ekiden
 static void process_ssl_slave_req(struct vsf_session* p_sess);
 static void common_do_login(struct vsf_session* p_sess,
                             const struct mystr* p_user_str, int do_chroot,
@@ -41,8 +41,9 @@
                                 const struct mystr* p_user_str,
                                 const struct mystr* p_orig_user_str);
 
-static void
-handle_sigchld(int duff)
+//static Ekiden
+void
+twoproc_handle_sigchld(int duff)
 {
   struct vsf_sysutil_wait_retval wait_retval = vsf_sysutil_wait();
   (void) duff;
@@ -73,7 +74,7 @@
      */
     ssl_comm_channel_init(p_sess);
   }
-  vsf_sysutil_install_async_sighandler(kVSFSysUtilSigCHLD, handle_sigchld);
+  vsf_sysutil_install_async_sighandler(kVSFSysUtilSigCHLD, twoproc_handle_sigchld);
   {
     int newpid = vsf_sysutil_fork();
     if (newpid != 0)
@@ -200,19 +201,28 @@
   }
 }
 
-static void
+//static Ekiden
+void
 process_login_req(struct vsf_session* p_sess)
 {
   enum EVSFPrivopLoginResult e_login_result = kVSFLoginNull;
   char cmd;
-  vsf_sysutil_unblock_sig(kVSFSysUtilSigCHLD);
-  /* Blocks */
-  cmd = priv_sock_get_cmd(p_sess->parent_fd);
-  vsf_sysutil_block_sig(kVSFSysUtilSigCHLD);
-  if (cmd != PRIV_SOCK_LOGIN)
-  {
-    die("bad request");
+  if (!ekiden_is_updating()) {  /* Ekiden */
+    vsf_sysutil_unblock_sig(kVSFSysUtilSigCHLD);
+    /* Blocks */
+    cmd = priv_sock_get_cmd(p_sess->parent_fd);
+    vsf_sysutil_block_sig(kVSFSysUtilSigCHLD);
+    if (cmd != PRIV_SOCK_LOGIN)
+    {
+      die("bad request");
+    }
   }
+
+  /* Ekiden, update point */
+  ekiden_update("twoprocess.c");
+  /* Ekiden, allow updating from blocking loop */
+  vsf_sysutil_ekiden_set_update_point("twoprocess.c");
+
   /* Get username and password - we must distrust these */
   {
     struct mystr password_str = INIT_MYSTR;
@@ -329,7 +339,7 @@
   handle_per_user_config(p_user_str);
   /* Set this before we fork */
   p_sess->is_anonymous = anon;
-  vsf_sysutil_install_async_sighandler(kVSFSysUtilSigCHLD, handle_sigchld);
+  vsf_sysutil_install_async_sighandler(kVSFSysUtilSigCHLD, twoproc_handle_sigchld);
   newpid = vsf_sysutil_fork(); 
   if (newpid == 0)
   {
diff -dur vsftpd/orig_vsftpd/vsftpd-2.0.6/twoprocess.h vsftpd-gen/vsftpd-2.0.6/twoprocess.h
--- vsftpd/orig_vsftpd/vsftpd-2.0.6/twoprocess.h	2011-10-05 12:40:20.755287000 -0400
+++ vsftpd-gen/vsftpd-2.0.6/twoprocess.h	2011-10-05 12:40:20.755287000 -0400
@@ -42,5 +42,10 @@
  */
 void vsf_two_process_chown_upload(struct vsf_session* p_sess, int fd);
 
+/* Ekiden: make visible so a jump to it is possible when updating */
+void process_login_req(struct vsf_session* p_sess);
+/* Ekiden: make visible so update to sigchld function is possible */
+void twoproc_handle_sigchld(int duff);
+
 #endif /* VSF_TWOPROCESS_H */
 
Only in vsftpd-gen/vsftpd-2.0.6: update_vsftpd.sh
Only in vsftpd-gen/vsftpd-2.0.6: vsftpd.xf
